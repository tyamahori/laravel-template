services:
  web:
    image: nginx:1.23.2-alpine
    container_name: ${COMPOSE_PROJECT_NAME}-${WEB_SUFFIX}
    working_dir: /opt/projectWorkSpace
    environment:
      - PROJECT_DOMAIN=${PROJECT_DOMAIN}
    command: >
      /bin/sh -c
      "envsubst '
      $$PROJECT_DOMAIN
      '< /etc/nginx/conf.d/default.conf.template
      > /etc/nginx/conf.d/default.conf
      && nginx -g 'daemon off;'"
    volumes:
      - type: bind
        source: "./nginx/default.conf.template"
        target: "/etc/nginx/conf.d/default.conf.template"
      - type: bind
        source: "../../src/public"
        target: "/opt/projectWorkSpace/public"
      - type: volume
        source: tyamahori-socket
        target: /var/run/php-fpm
      - type: volume
        source: tyamahori-schemaspy
        target: /opt/schema
    depends_on:
      app:
        condition: service_started
    networks:
      default:
        aliases:
          - ${PROJECT_DOMAIN}
          - mail.${PROJECT_DOMAIN}
          - file.${PROJECT_DOMAIN}
          - minio.${PROJECT_DOMAIN}

  ssh:
    container_name: ${COMPOSE_PROJECT_NAME}-ssh
    build: ./ssh
    ports:
      - "127.0.0.1:22:22"
    tty: true

  app:
    user: "${USERID}:${GID}"
    build:
      context: ../..
      dockerfile: ./docker/mac/php/Dockerfile
      args:
        - UID=${USERID}
        - GID=${GID}
        - UNAME=${UNAME}
        - PROJECT_DOMAIN=${PROJECT_DOMAIN}
        - XDEBUG=true
        - RUNN_VERSION=${RUNN_VERSION}
        - SQLDEF_VERSION=${SQLDEF_VERSION}
    container_name: ${COMPOSE_PROJECT_NAME}-${APP_SUFFIX}
    environment:
      PHP_CS_FIXER_IGNORE_ENV: 1
    extra_hosts:
      - "host.docker.internal:host-gateway" # rancher desktopだとこの設定が邪魔になる
    volumes:
      - type: bind
        source: "../../src"
        target: "/opt/projectWorkSpace"
      - type: volume
        source: tyamahori-socket
        target: /var/run/php-fpm
    working_dir: /opt/projectWorkSpace
    env_file:
      - .env
    depends_on:
      db:
        condition: service_healthy
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
      mail:
        condition: service_started
      s3:
        condition: service_started

  schemaspy:
    container_name: ${COMPOSE_PROJECT_NAME}-${SCHEMA_SUFFIX}
    image: schemaspy/schemaspy:snapshot
    working_dir: /app
    volumes:
      - type: volume
        source: tyamahori-schemaspy
        target: /output
    command:
      -t pgsql
      -u "${DB_USERNAME}"
      -host "${COMPOSE_PROJECT_NAME}-${DB_SUFFIX}"
      -port "${DB_PORT}"
      -db "${DB_DATABASE}"
      -p "${DB_PASSWORD}"
      -s "${DB_SCHEMA}"
    profiles:
      - schema

  db:
    image: postgres:15.1-alpine
    container_name: ${COMPOSE_PROJECT_NAME}-${DB_SUFFIX}
    volumes:
      - type: bind
        source: "./postgre/sql/setup.sql"
        target: "/docker-entrypoint-initdb.d/setup.sql"
      - type: volume
        source: tyamahori-db
        target: /var/lib/postgresql/data
    env_file:
      - .env
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "${DB_USERNAME}", "-d", "${DB_DATABASE}"]
      interval: 10s
      timeout: 5s
      retries: 5
    hostname: db.${PROJECT_DOMAIN}

  mysql:
    image: mysql:8.0.31
    container_name: ${COMPOSE_PROJECT_NAME}-${DB_SUFFIX}-mysql
    volumes:
      - type: bind
        source: "./postgre/sql/setup.sql"
        target: "/docker-entrypoint-initdb.d/setup.sql"
    env_file:
      - .env
    healthcheck:
      test: ["CMD", "mysqladmin" ,"ping", "-h", "localhost", "-u", "${DB_USERNAME}", "-p${DB_PASSWORD}"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:6.0-alpine
    container_name: ${COMPOSE_PROJECT_NAME}-${REDIS_SUFFIX}
    volumes:
      - type: volume
        source: tyamahori-redis
        target: /data
    command: redis-server --appendonly yes
    env_file:
      - .env
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 1s
      timeout: 30s
      retries: 30

  mail:
    image: mailhog/mailhog
    platform: linux/x86_64
    container_name: ${COMPOSE_PROJECT_NAME}-${MAIL_SUFFIX}

  bucket:
    image: minio/mc
    container_name: ${COMPOSE_PROJECT_NAME}-${BUCKET_SUFFIX}
    entrypoint: >
      sh -c "
      until (mc config host add myminio http://s3:9000 ${AWS_ACCESS_KEY_ID} ${AWS_SECRET_ACCESS_KEY}) do echo '...waiting...' && sleep 1; done;
      mc mb myminio/${AWS_BUCKET};
      mc policy set public myminio/${AWS_BUCKET};
      tail -f /dev/null;
      "

  s3:
    image: minio/minio:latest
    container_name: ${COMPOSE_PROJECT_NAME}-${S3_SUFFIX}
    env_file:
      - .env
    command: server /export --console-address ":9001"
    volumes:
      - type: volume
        source: tyamahori-s3
        target: /export
      - type: volume
        source: tyamahori-s3-config
        target: /root/.minio
    hostname: s3.${PROJECT_DOMAIN}

volumes:
  tyamahori-redis:
    name: ${COMPOSE_PROJECT_NAME}-redis
  tyamahori-db:
    name: ${COMPOSE_PROJECT_NAME}-db
  tyamahori-socket:
    name: ${COMPOSE_PROJECT_NAME}-socket
  tyamahori-schemaspy:
    name: ${COMPOSE_PROJECT_NAME}-schemaspy
  tyamahori-node:
    name: ${COMPOSE_PROJECT_NAME}-node
  tyamahori-s3:
    name: ${COMPOSE_PROJECT_NAME}-s3
  tyamahori-s3-config:
    name: ${COMPOSE_PROJECT_NAME}-s3-config
